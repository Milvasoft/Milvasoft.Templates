<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvonion.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Milvonion.Infrastructure.InfraServiceCollectionExtensions">
            <summary>
            Infrastructure service collection extensions.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.InfraServiceCollectionExtensions.AddInfrastructureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Adds infrastructure services.
            </summary>
            <param name="services"></param>
            <param name="configurationManager"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.InfraServiceCollectionExtensions.AddDataAccessServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Adds data access services.
            </summary>
            <param name="services"></param>
            <param name="configurationManager"></param>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.InfrastructureAssembly">
            <summary>
            Static class for ease of assembly access.
            </summary>
        </member>
        <member name="F:Milvonion.Infrastructure.InfrastructureAssembly.Assembly">
            <summary>
            Assembly instance.
            </summary>
        </member>
        <member name="T:Milvonion.Infrastructure.LazyImpl.MilvonionLazy`1">
            <summary>
            Custom <see cref="T:System.Lazy`1"/> class.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Constructor of <see cref="T:Milvonion.Infrastructure.LazyImpl.MilvonionLazy`1"/>.
            </remarks>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.LazyImpl.MilvonionLazy`1.#ctor(System.IServiceProvider)">
            <summary>
            Custom <see cref="T:System.Lazy`1"/> class.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Constructor of <see cref="T:Milvonion.Infrastructure.LazyImpl.MilvonionLazy`1"/>.
            </remarks>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:Milvonion.Infrastructure.Logging.MilvonionDbLogger">
            <summary>
            Example <see cref="T:Milvasoft.Core.Abstractions.IMilvaLogger"/> implementation.
            </summary>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Example <see cref="T:Milvasoft.Core.Abstractions.IMilvaLogger"/> implementation.
            </summary>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Log(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.LogAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Debug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Debug(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Debug(System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Debug(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Error(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Error(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Error(System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Error(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Fatal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Fatal(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Fatal(System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Fatal(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Information(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Information(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Information(System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Information(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Verbose(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Verbose(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Verbose(System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Verbose(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Warning(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Warning(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Warning(System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.MilvonionDbLogger.Warning(System.Exception,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Milvonion.Infrastructure.Logging.RemoveTypeTagEnricher">
            <summary>
            Removes _typeTag from Serilog's output.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.RemoveTypeTagEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Removes _typeTag from Serilog's output.
            </summary>
            <param name="logEvent"></param>
            <param name="propertyFactory"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Logging.RemoveTypeTagEnricher.RemoveTypeTags(Serilog.Events.LogEventPropertyValue)">
            <summary>
            Removes _typeTag from Serilog's output.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextAccessor">
            <summary>
            Milvonion scoped factory.
            </summary>
            <remarks>
            Initializes new instance of <see cref="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory"/>.
            </remarks>
            <param name="context"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextAccessor.#ctor(Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext)">
            <summary>
            Milvonion scoped factory.
            </summary>
            <remarks>
            Initializes new instance of <see cref="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory"/>.
            </remarks>
            <param name="context"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextAccessor.GetDbContext">
            <summary>
            Db context creation implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory">
            <summary>
            Milvonion scoped factory.
            </summary>
            <remarks>
            Initializes new instance of <see cref="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory"/>.
            </remarks>
            <param name="pooledFactory"></param>
            <param name="dataAccessConfiguration"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory.#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext},Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration,System.IServiceProvider)">
            <summary>
            Milvonion scoped factory.
            </summary>
            <remarks>
            Initializes new instance of <see cref="T:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory"/>.
            </remarks>
            <param name="pooledFactory"></param>
            <param name="dataAccessConfiguration"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.Context.MilvonionDbContextScopedFactory.CreateDbContext">
            <summary>
            Db context creation implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.DatabaseMigrator">
            <summary>
            Data seed methods.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.#ctor(System.IServiceProvider)">
            <summary>
            Data seed methods.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.ResetDatabaseAsync(Microsoft.Extensions.Configuration.IConfiguration,System.Threading.CancellationToken)">
            <summary>
            Remove, recreates and seed database for development purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.CreateTriggersAsync(System.Threading.CancellationToken)">
            <summary>
            Creates default triggers.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.SeedDefaultDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Seeds default production data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.SeedUIRelatedDataAsync(System.Threading.CancellationToken)">
            <summary>
            Seeds default ui related data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.SeedFakeDataAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Seeds fake data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.MigratePermissionsAsync(Milvonion.Application.Interfaces.IPermissionManager,System.Threading.CancellationToken)">
            <summary>
            Migrate default permissions.
            </summary>
            <param name="permissionManager"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.DatabaseMigrator.InitDatabaseAsync(Milvonion.Application.Interfaces.IPermissionManager,System.Threading.CancellationToken)">
            <summary>
            Initial data seed and migration operation for production.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.UserFaker">
            <summary>
            Data faker.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.UserFaker.#ctor(System.Boolean,System.String,System.Collections.Generic.List{Milvonion.Domain.Role})">
            <summary>
            Constructor for faker.
            </summary>
            <param name="sameData"></param>
            <param name="locale"></param>
            <param name="roles"></param>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.RoleFaker">
            <summary>
            Data faker.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.RoleFaker.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor for faker.
            </summary>
            <param name="sameData"></param>
            <param name="locale"></param>
        </member>
        <member name="T:Milvonion.Infrastructure.Persistence.Repository.MilvonionRepositoryBase`1">
            <summary>
            Constructor of <c>BillRepository</c> class.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Persistence.Repository.MilvonionRepositoryBase`1.#ctor(Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext)">
            <summary>
            Constructor of <c>BillRepository</c> class.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="T:Milvonion.Infrastructure.Services.AccountManager">
            <summary>
            User login operation.
            It updates sessions in database.
            Generates access and refresh tokens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.AccountManager.#ctor(Milvonion.Application.Interfaces.IMilvonionRepositoryBase{Milvonion.Domain.UserSession},Milvasoft.Identity.Abstract.IMilvaTokenManager,Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions)">
            <summary>
            User login operation.
            It updates sessions in database.
            Generates access and refresh tokens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.AccountManager.LoginAsync(Milvonion.Domain.User,System.String,System.Threading.CancellationToken)">
            <summary>
            User login operation.
            It updates sessions in database.
            Generates access and refresh tokens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.AccountManager.GenerateToken(Milvonion.Domain.User,System.Nullable{System.DateTime})">
            <summary>
            Generates token for ci user.
            Generates access token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.AccountManager.FindSessionsToRemove(System.Collections.Generic.List{Milvonion.Domain.UserSession},System.String)">
            <summary>
            Finds the sessions to remove. Find criteria is the device id and the expiry date.
            </summary>
            <param name="userSessions"></param>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Services.DeveloperService">
            <summary>
            Developer service.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.#ctor(System.IServiceProvider)">
            <summary>
            Developer service.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.ResetDatabaseAsync">
            <summary>
            Remove, recreates and seed database for development purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.SeedDevelopmentDataAsync">
            <summary>
            Seeds data for development purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.SeedFakeDataAsync(System.Boolean,System.String)">
            <summary>
            Seeds fake data.
            </summary>
            <param name="sameData"></param>
            <param name="locale"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.InitDatabaseAsync">
            <summary>
            Initial migration operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.GetMethodLogsAsync(Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Gets method logs.
            </summary>
            <param name="listRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.DeveloperService.GetApiLogsAsync(Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Gets api logs.
            </summary>
            <param name="listRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Services.ExportService">
            <summary>
            Used to export data. 
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.ExportService.#ctor(System.IServiceProvider)">
            <summary>
            Used to export data. 
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.ExportService.DynamicExportToExcelAsync(Milvonion.Application.Dtos.ExportDtos.ExportRequest,System.Threading.CancellationToken)">
            <summary>
            Dynamically creates an excel file according to the export type.
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.ExportService.ExportToExcel``1(Milvasoft.Components.Rest.MilvaResponse.ListResponse{``0},System.String)">
            <summary>
            Exports the data to excel.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.ExportService.ExportToExcel(Milvasoft.Components.Rest.MilvaResponse.IHasMetadata,System.String)">
            <summary>
            Exports the data to excel.
            </summary>
            <param name="hasMetadataResponse"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.ExportService.DisplayFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>\\{(.*?)\\}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Milvonion.Infrastructure.Services.LookupService">
            <summary>
            Lookup service for getting dynamic entity fetch.
            </summary>
            <param name="dbContext"></param>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.LookupService.#ctor(Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext,Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer)">
            <summary>
            Lookup service for getting dynamic entity fetch.
            </summary>
            <param name="dbContext"></param>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.LookupService.GetLookupsAsync(Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequest)">
            <summary>
            Dynamic entity fetch.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.LookupService.GetEnumLookups(System.String)">
            <summary>
            Get enum names as localized.
            </summary>
            <param name="enumName"></param>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Services.PermissionManager">
            <summary>
            Permission manager for managing system permissions.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.PermissionManager.#ctor(Milvonion.Application.Interfaces.IMilvonionRepositoryBase{Milvonion.Domain.Permission},Milvonion.Application.Interfaces.IMilvonionRepositoryBase{Milvonion.Domain.RolePermissionRelation})">
            <summary>
            Permission manager for managing system permissions.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.PermissionManager.GetAllPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all permissions as entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.PermissionManager.MigratePermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Migrate permissions to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Services.UIService">
            <summary>
            Service for UI operations.
            </summary>
            <param name="multiLanguageManager"></param>
            <param name="menuItemRepository"></param>
            <param name="pageRepository"></param>
            <param name="userRepository"></param>
            <param name="httpContextAccessor"></param>
            <param name="milvaLocalizer"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.#ctor(Milvasoft.Core.MultiLanguage.Manager.IMultiLanguageManager,Milvonion.Application.Interfaces.IMilvonionRepositoryBase{Milvonion.Domain.UI.MenuItem},Milvonion.Application.Interfaces.IMilvonionRepositoryBase{Milvonion.Domain.UI.Page},Milvonion.Application.Interfaces.IMilvonionRepositoryBase{Milvonion.Domain.User},Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer)">
            <summary>
            Service for UI operations.
            </summary>
            <param name="multiLanguageManager"></param>
            <param name="menuItemRepository"></param>
            <param name="pageRepository"></param>
            <param name="userRepository"></param>
            <param name="httpContextAccessor"></param>
            <param name="milvaLocalizer"></param>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.GetAccessibleMenuItemsAsync(System.Collections.Generic.IEnumerable{Milvonion.Domain.Permission},System.Threading.CancellationToken)">
            <summary>
            Gets accessible menu items according to <paramref name="userPermissions"/>.
            </summary>
            <param name="userPermissions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.GetAccessibleMenuItemsForCurrentUserAsync(System.Threading.CancellationToken)">
            <summary>
            Gets accessible menu items according to current user permissions.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.GetCurrentUserPageAccessibilityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets page information by <paramref name="pageName"/>. 
            </summary>
            <param name="pageName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.GetPagesAccessibilityAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets pages information according to <paramref name="userPermissions"/>. 
            </summary>
            <param name="userPermissions"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.GetCurrentUserPagesAccessibilityAsync(System.Threading.CancellationToken)">
            <summary>
            Gets pages information for current user. 
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.GetLocalizedContents">
            <summary>
            Gets localized contents related to UI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvonion.Infrastructure.Services.UIService.BuildHierarchy(System.Collections.Generic.IEnumerable{Milvonion.Domain.UI.MenuItem})">
            <summary>
            Builds parent-child hierarchy for menu items.
            </summary>
            <param name="menuItems"></param>
            <returns></returns>
        </member>
        <member name="T:Milvonion.Infrastructure.Utils.Swagger.EnumSchemaFilter">
            <summary>
            View enums strings with values.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Utils.Swagger.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <inheritdoc/>
        </member>
        <member name="T:Milvonion.Infrastructure.Utils.Swagger.ExampleSchemaFilter">
            <summary>
            Swagger examples.
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Utils.Swagger.ExampleSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            Apply examples to swagger schema
            </summary>
            <param name="schema"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvonion.Infrastructure.Utils.Swagger.RequestHeaderFilter">
            <summary>
            Operation filter to add the requirement of the custom header
            </summary>
        </member>
        <member name="M:Milvonion.Infrastructure.Utils.Swagger.RequestHeaderFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies configuration.
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DisplayFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DisplayFormatRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
