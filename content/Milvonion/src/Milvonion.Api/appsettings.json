{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information",
      "System": "Warning"
    }
  },
  "ConnectionStrings": {
    "DefaultConnectionString": "xconnectionstringxx"
  },
  "ApiHost": {
    "HttpUrl": "http://localhost:xhttpportxx",
    "HttpsUrl": "https://localhost:xhttpsportxx"
  },
  "HealthChecksUI": {
    "Webhooks": [
      {
        "Name": "Internal",
        "Uri": "/xrouteprefixx/v1/healthcheck/alert",
        "Payload": "{ \"message\": \"Webhook report for [[LIVENESS]]: [[FAILURE]] - Description: [[DESCRIPTIONS]]\"}",
        "RestoredPayload": "{ \"message\": \"[[LIVENESS]] is back to life\"}"
      }
    ],
    "EvaluationTimeInSeconds": 10,
    "MinimumSecondsBetweenFailureNotifications": 60
  },
  "Milvasoft": {
    "Localization": {
      "Resx": {
        "ManagerLifetime": 2, //Transient
        "KeyFormat": "{0}",
        "KeyFormatDelegate": null,
        "UseInMemoryCache": true,
        "MemoryCacheEntryOptions": null,
        "ResourcesPath": null,
        "ResourcesFolderPath": null
      },
      "Redis": {
        "ManagerLifetime": 2, //Transient
        "KeyFormat": "_ML_{0}_{1}",
        "KeyFormatDelegate": null,
        "UseInMemoryCache": true,
        "MemoryCacheEntryOptions": null,
        "ResourcesPath": null,
        "ResourcesFolderPath": null,
        "RedisOptions": {
          "AccessorLifetime": 0, //Singleton
          "ConnectionString": "redis",
          "UseUtcForExpirationDates": false
        }
      }
    },
    "Interception": {
      "Log": {
        "InterceptorLifetime": 1, //Scoped
        "AsyncLogging": true,
        "LogDefaultParameters": true,
        "UseUtcForLogTimes": true,
        "ExcludeResponseMetadataFromLog": true,
        "ExtraLoggingPropertiesSelector": null
      },
      "Response": {
        "InterceptorLifetime": 1, //Scoped
        "MetadataCreationEnabled": true,
        "ApplyMetadataRules": true,
        "TranslateResultMessages": true,
        "TranslateMetadata": true,
        "HideByRoleFunc": null,
        "ApplyLocalizationFunc": null
      },
      "Cache": {
        "InterceptorLifetime": 1, //Scoped
        //"CacheAccessorAssemblyQualifiedName": "Milvasoft.Caching.InMemory.Accessor.MemoryCacheAccessor, Milvasoft.Caching.InMemory, Version=8.1.9.0, Culture=neutral, PublicKeyToken=null",
        "IncludedRequestHeaderKeys": [ "accept-language" ]
      },
      "Transaction": {
        "InterceptorLifetime": 1, //Scoped
        "DbContextAssemblyQualifiedName": "Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext, Milvonion.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
      },
      "WithNoLock": {
        "InterceptorLifetime": 1, //Scoped
        "DbContextAssemblyQualifiedName": "Milvonion.Infrastructure.Persistence.Context.MilvonionDbContext, Milvonion.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
      }
    },
    "Caching": {
      "Redis": {
        "AccessorLifetime": 0, //Singleton
        "ConnectionString": "redis",
        "UseUtcForExpirationDates": false
      },
      "InMemory": {
        "AccessorLifetime": 0, //Singleton
        "MemoryCacheOptions": null
      }
    },
    "FileOperations": {
      "Json": {
        "Lifetime": 0, //Singleton
        "BasePath": null,
        "EncryptionKey": "w!z%C*F-JaNdRgUk",
        "CultureCode": "en-US"
      }
    },
    "DataAccess": {
      "DbContext": {
        "DynamicFetch": {
          "EntityAssemblyName": "Milvonion.Domain",
          "AllowedEntityNamesForLookup": [ "User", "Role" ],
          "MaxAllowedPropertyCountForLookup": 5
        },
        "UseUtcForDateTime": true,
        "DefaultSoftDeletionState": 0, // Passive
        "GetCurrentUserNameDelegate": null
      },
      "Repository": {
        "DefaultSaveChangesChoice": 0, // AfterEveryOperation
        "DefaultSoftDeletedFetchState": false,
        "ResetSoftDeletedFetchStateToDefault": true
      },
      "Auditing": {
        "AuditCreationDate": true,
        "AuditCreator": true,
        "AuditModificationDate": true,
        "AuditModifier": true,
        "AuditDeletionDate": true,
        "AuditDeleter": true
      }
    },
    "Identity": {
      "User": {
        "AllowedUserNameCharacters": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+",
        "RequireUniqueEmail": false
      },
      "Password": {
        "Hasher": {
          "IterationCount": 10000
        },
        "RequiredLength": 6,
        "RequiredUniqueChars": 1,
        "RequireNonAlphanumeric": true,
        "RequireLowercase": true,
        "RequireUppercase": true,
        "RequireDigit": true
      },
      "Lockout": {
        "AllowedForNewUsers": true,
        "MaxFailedAccessAttempts": 5,
        "DefaultLockoutTimeSpan": 5
      },
      "SignIn": {
        "RequireConfirmedEmail": false,
        "RequireConfirmedPhoneNumber": false
      },
      "Token": {
        "UseUtcForDateTimes": true,
        "ExpirationMinute": 30,
        "TokenValidationParameters": {
          "ValidateIssuer": false,
          "ValidateAudience": false
        },
        "SecurityKeyType": 0, // Symmetric
        "SymmetricPublicKey": "9321acf6145bc0a5d573a835be473682992d17a17830de85a122c715633ae5e9"
      }
    }
  },
  "Serilog": {
    "Using": [ "Serilog.Expressions", "Serilog.Sinks.Console", "Serilog.Sinks.PostgreSQL.Alternative" ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft.AspNetCore": "Information",
        "System": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByExcluding",
                "Args": {
                  "expression": "SourceContext = 'Milvonion.Api.Middlewares.RequestResponseLoggingMiddleware'"
                }
              },
              {
                "Name": "ByExcluding",
                "Args": {
                  "expression": "SourceContext = 'Milvonion.Infrastructure.Logging.MilvonionDbLogger'"
                }
              }
            ],
            "WriteTo": [
              {
                "Name": "Console"
              }
            ]
          }
        }
      },
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  "expression": "SourceContext = 'Milvonion.Api.Middlewares.RequestResponseLoggingMiddleware'"
                }
              }
            ],
            "WriteTo": [
              {
                "Name": "PostgreSQL",
                "Args": {
                  "connectionString": "xconnectionstringxx",
                  "tableName": "ApiLogs",
                  "schemaName": "public",
                  "needAutoCreateTable": false,
                  "period": "0.00:00:05",
                  "batchSizeLimit": 50,
                  "loggerPropertyColumnOptions": {
                    "TransactionId": {
                      "Name": "TransactionId",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Varchar"
                    },
                    "Severity": {
                      "Name": "Severity",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Varchar"
                    },
                    "Timestamp": {
                      "Name": "Timestamp",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "TimestampTz"
                    },
                    "Path": {
                      "Name": "Path",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Varchar"
                    },
                    "RequestInfoJson": {
                      "Name": "RequestInfoJson",
                      "Format": "{0}",
                      "WriteMethod": "Json",
                      "DbType": "Jsonb"
                    },
                    "ResponseInfoJson": {
                      "Name": "ResponseInfoJson",
                      "Format": "{0}",
                      "WriteMethod": "Json",
                      "DbType": "Jsonb"
                    },
                    "ElapsedMs": {
                      "Name": "ElapsedMs",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Bigint"
                    },
                    "IpAddress": {
                      "Name": "IpAddress",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Varchar"
                    },
                    "UserName": {
                      "Name": "UserName",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Varchar"
                    },
                    "Exception": {
                      "Name": "Exception",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "Varchar"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  "expression": "SourceContext = 'Milvonion.Infrastructure.Logging.MilvonionDbLogger'"
                }
              }
            ],
            "WriteTo": [
              {
                "Name": "PostgreSQL",
                "Args": {
                  "connectionString": "xconnectionstringxx",
                  "tableName": "MethodLogs",
                  "schemaName": "public",
                  "needAutoCreateTable": false,
                  "period": "0.00:00:05",
                  "batchSizeLimit": 50,
                  "loggerPropertyColumnOptions": {
                    "TransactionId": {
                      "Name": "TransactionId",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "Namespace": {
                      "Name": "Namespace",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "ClassName": {
                      "Name": "ClassName",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "MethodName": {
                      "Name": "MethodName",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "MethodParams": {
                      "Name": "MethodParams",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "MethodResult": {
                      "Name": "MethodResult",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "ElapsedMs": {
                      "Name": "ElapsedMs",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "integer"
                    },
                    "UtcLogTime": {
                      "Name": "UtcLogTime",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "TimestampTz"
                    },
                    "CacheInfo": {
                      "Name": "CacheInfo",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "Exception": {
                      "Name": "Exception",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "text"
                    },
                    "IsSuccess": {
                      "Name": "IsSuccess",
                      "Format": "{0}",
                      "WriteMethod": "Raw",
                      "DbType": "boolean"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}
